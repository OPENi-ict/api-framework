#!/usr/bin/env python
"""
WordAPI.py
Copyright 2014 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""


class ObjectsApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    

    def createObject(self, cloudletId, body, **kwargs):
        """Create an Object

        Args:
            cloudletId, str: The id of the users cloudlet. (required)

            body, OPENiObject: Object to be created in the cloudlet. (required)

            

        Returns: ObjectResponse
        """

        allParams = ['cloudletId', 'body']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createObject" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/objects/{cloudletId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        # if ('cloudletId' in params):
        #     replacement = str(self.apiClient.toPathValue(params['cloudletId']))
        #     resourcePath = resourcePath.replace('{' + 'cloudletId' + '}',
        #                                         replacement)
        resourcePath = "https://193.1.188.34:443/api/v1/objects/c_a136c28ce7e970c27c5a36593c2990df-60"
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ObjectResponse')
        return responseObject
        

        

    def getObject(self, cloudletId, objectId, **kwargs):
        """Retrieves an object from the Cloudlet.

        Args:
            cloudletId, str: The id of the users Cloudlet that is to be accessed. (required)

            objectId, str: Id of the object to be accessed. (required)

            

        Returns: OPENiObject
        """

        allParams = ['cloudletId', 'objectId']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getObject" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/objects/{cloudletId}/{objectId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('cloudletId' in params):
            replacement = str(self.apiClient.toPathValue(params['cloudletId']))
            resourcePath = resourcePath.replace('{' + 'cloudletId' + '}',
                                                replacement)
        if ('objectId' in params):
            replacement = str(self.apiClient.toPathValue(params['objectId']))
            resourcePath = resourcePath.replace('{' + 'objectId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'OPENiObject')
        return responseObject
        

        

    def getObjects(self, cloudletId, **kwargs):
        """Retrieves the Cloudlets Objects.

        Args:
            cloudletId, str: The id of the users Cloudlet that is to be accessed. (required)

            skip, int: Pagination feature, the amount of objects to skip. (optional)

            limit, int: The amount of objects to return. (optional)

            type, str: Limits Object to those of this type. (optional)

            id_only, bool: If true returns an array of object ids instead of the full objects. (optional)

            with_property, str: Comma separated list of properties that the object must have. (optional)

            property_filter, str: Comma separated list of name value pairs of properties that the object must satisfy. e.g. name=bob (optional)

            only_show_properties, str: Comma separated list of properties to include in the objects, all others are removed. (optional)

            

        Returns: Array[OPENiObject]
        """

        allParams = ['cloudletId', 'skip', 'limit', 'type', 'id_only', 'with_property', 'property_filter', 'only_show_properties']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getObjects" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/objects/{cloudletId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('skip' in params):
            queryParams['skip'] = self.apiClient.toPathValue(params['skip'])
        if ('limit' in params):
            queryParams['limit'] = self.apiClient.toPathValue(params['limit'])
        if ('type' in params):
            queryParams['type'] = self.apiClient.toPathValue(params['type'])
        if ('id_only' in params):
            queryParams['id_only'] = self.apiClient.toPathValue(params['id_only'])
        if ('with_property' in params):
            queryParams['with_property'] = self.apiClient.toPathValue(params['with_property'])
        if ('property_filter' in params):
            queryParams['property_filter'] = self.apiClient.toPathValue(params['property_filter'])
        if ('only_show_properties' in params):
            queryParams['only_show_properties'] = self.apiClient.toPathValue(params['only_show_properties'])
        if ('cloudletId' in params):
            replacement = str(self.apiClient.toPathValue(params['cloudletId']))
            resourcePath = resourcePath.replace('{' + 'cloudletId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[OPENiObject]')
        return responseObject
        

        

    def setObject(self, cloudletId, objectId, revision, body, **kwargs):
        """Updates the properties of on object with the provided properties

        Args:
            cloudletId, str: The id of the users Cloudlet that is to be accessed. (required)

            objectId, str: Id of the object to be accessed. (required)

            revision, str: revision id of the object to be updated. (required)

            body, OPENiObject: Object with properties that are to be overwritten. (required)

            

        Returns: ObjectResponse
        """

        allParams = ['cloudletId', 'objectId', 'revision', 'body']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method setObject" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/objects/{cloudletId}/{objectId}/{revision}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        if ('cloudletId' in params):
            replacement = str(self.apiClient.toPathValue(params['cloudletId']))
            resourcePath = resourcePath.replace('{' + 'cloudletId' + '}',
                                                replacement)
        if ('objectId' in params):
            replacement = str(self.apiClient.toPathValue(params['objectId']))
            resourcePath = resourcePath.replace('{' + 'objectId' + '}',
                                                replacement)
        if ('revision' in params):
            replacement = str(self.apiClient.toPathValue(params['revision']))
            resourcePath = resourcePath.replace('{' + 'revision' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ObjectResponse')
        return responseObject
        

        

    def removeObject(self, cloudletId, objectId, **kwargs):
        """Removes an object from the Cloudlet.

        Args:
            cloudletId, str: The id of the users Cloudlet. (required)

            objectId, str: Id of the object to be removed. (required)

            

        Returns: ObjectResponse
        """

        allParams = ['cloudletId', 'objectId']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method removeObject" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/objects/{cloudletId}/{objectId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('cloudletId' in params):
            replacement = str(self.apiClient.toPathValue(params['cloudletId']))
            resourcePath = resourcePath.replace('{' + 'cloudletId' + '}',
                                                replacement)
        if ('objectId' in params):
            replacement = str(self.apiClient.toPathValue(params['objectId']))
            resourcePath = resourcePath.replace('{' + 'objectId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ObjectResponse')
        return responseObject
        

        

    




