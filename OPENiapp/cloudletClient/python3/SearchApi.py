#!/usr/bin/env python
"""
WordAPI.py
Copyright 2014 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from .models import *


class SearchApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    

    def search(self, **kwargs):
        """Search for data within a cloudlet.

        Args:
            with_property, str: Comma separated list of properties that the object must have. (optional)

            property_filter, str: Comma separated list of name value pairs of properties that the object must satisfy. e.g. name=bob (optional)

            from, str: A pagination parameter, from specifies the start index of the result Array. (optional)

            limit, str: A pagination parameter, limit specifies the amount of results the result array contains. (optional)

            

        Returns: SearchResult
        """

        allParams = ['with_property', 'property_filter', 'from', 'limit']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method search" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/search'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('with_property' in params):
            queryParams['with_property'] = self.apiClient.toPathValue(params['with_property'])
        if ('property_filter' in params):
            queryParams['property_filter'] = self.apiClient.toPathValue(params['property_filter'])
        if ('from' in params):
            queryParams['from'] = self.apiClient.toPathValue(params['from'])
        if ('limit' in params):
            queryParams['limit'] = self.apiClient.toPathValue(params['limit'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SearchResult')
        return responseObject
        

        

    




